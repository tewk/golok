process producer {

  init: 			[Init, epsilon] ->  [Produced, item]
  produced: 		[Produced, item] -> [AddBuffer, putprod]
  addbuffernak:	[AddBuffer, bufferNAKprod] -> [AddBuffer, putprod]
  addbufferok:	[AddBuffer, bufferOKprod] ->  [Produced, item]
}

process consumer {
  init2:    		[Init2, epsilon]   -> [GetBuffer, getcons]
  getnak2:  		[GetBuffer, bufferNAKcons] -> [GetBuffer, getcons]
  getok2:   		[GetBuffer, bufferOKcons] -> [HasConsumed, in]
  inleave:		[HasConsumed, in] -> [GetBuffer, getcons]
}

process buffer {
 putzeroprod: [Zero, putprod] -> [One, bufferOKprod]

 putoneprod: [One, putprod] -> [One, bufferNAKprod]

 getzerocons: [Zero, getcons] -> [Zero, bufferNAKcons]

 getonecons: [One, getcons] -> [Zero, bufferOKcons]
 
}


topology {

  connectivity {
    producer 0 -- buffer 0
    producer 1 -- buffer 0
    consumer 0 -- buffer 0
    consumer 1 -- buffer 0
  }
  
  additionrule add-producer {
  	create: producer x
  	add: var x -- buffer 0
  }

  additionrule add-consumer  {
  	create: consumer x
  	add: var x -- buffer 0
  }
  
  msgs {
  	(producer, item, self)
  	(consumer, in, self)
  	(producer, bufferOKprod, peer)
  	(producer, bufferNAKprod, peer)
  	(consumer, bufferOKcons, peer)
  	(consumer, bufferNAKcons, peer)
  
  	(buffer, putprod, peer)
  	(buffer, getcons, peer)
  }
}

initialconfig {
}
