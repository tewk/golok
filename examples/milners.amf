#
# milners.amf: Milner's Scheduler Protocol
#

process scheduler {

# Forward the token and start computing
FORWARD: 	[begin, token]      -> [task-run, compute]

# Initial automaton
INIT:  	[Start, epsilon]      -> [begin, token]

# Receive token before computation
WAIT_TKN:      [task-run, token]     -> [task-wtoken, send-token]

# and send the token
WAIT_TSK_START: [send-token, send-token ] -> [task-run, token ]

# Finish task before receiving token
TASK_DONE: 	[task-run, compute]   -> [wait-token, compute]
RESTART: 	[wait-token, token]   -> [task-run, token]

}

addition-rule plain-add {
  require: scheduler y -> scheduler 0
  create: scheduler x
  remove: var y -> scheduler 0
  add: var y -> var x
  add: var x -> scheduler 0
}

topology {
 (scheduler,token,lpeer)
 (scheduler,compute,self)
 (scheduler,send-token,self)
}

initial-config{
 ( scheduler 0 INIT )
}

kernel = milners.topo

