#
# SpinLock-mult.amf
#
# automata file for Spin Lock with multiple locks
#

process thread {
START: [initial, epsilon ] -> [ Start, begin ]
REQUEST: [ Start, begin ] -> [Waiting, req ]
REJECTED: [Waiting, nack ] -> [Waiting, req ]
ACCEPTED: [Waiting, ack ] -> [Has_Object, in ]
RELEASING: [Has_Object, in ] -> [Start, rel ]

}

process object {
REQ_FREE: [NB, req ] -> [ B, ack ]
REQ_BUSY: [B, req ] -> [ B, nack]
RCV_REL: [B, rel ] -> [NB, begin]

}


topology {
  connectivity {
    thread 0 -- object 0
    thread 0 -- object 1
    thread 1 -- object 0
    thread 1 -- object 1
  }

  additionrule add-thread {
    create: thread x
    foreach object y 
    {
     add: var x -- var y 
    }
  }
  
  additionrule add-object {
    create: object x
    foreach thread y {
      add: var x -- var y
    }
  }

  msgs {
    (object, req, peer)
    (object, rel, peer)
    (thread, in, self)
    (thread, ack, peer)
    (thread, nack, peer)
    (thread, begin, peer)
    (thread, begin, self)
  }
}

initialconfig {
}
